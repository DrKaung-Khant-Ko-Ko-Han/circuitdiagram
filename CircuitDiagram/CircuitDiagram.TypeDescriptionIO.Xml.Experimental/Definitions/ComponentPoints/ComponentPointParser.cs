//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ComponentPoint.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ComponentPointParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, CONSTANT=7, VARIABLENAME=8;
	public const int
		RULE_r = 0, RULE_position = 1, RULE_modifiers = 2, RULE_modifier = 3, 
		RULE_plusminus = 4, RULE_variable = 5;
	public static readonly string[] ruleNames = {
		"r", "position", "modifiers", "modifier", "plusminus", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'start'", "'middle'", "'end'", "'+'", "'-'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "CONSTANT", "VARIABLENAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ComponentPoint.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ComponentPointParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ComponentPointParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ComponentPointParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RContext : ParserRuleContext {
		public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 0, RULE_r);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; position();
			State = 13; modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(Context, State);
		EnterRule(_localctx, 2, RULE_position);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 4, RULE_modifiers);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; modifier();
				State = 18; modifiers();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public PlusminusContext plusminus() {
			return GetRuleContext<PlusminusContext>(0);
		}
		public ITerminalNode CONSTANT() { return GetToken(ComponentPointParser.CONSTANT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_modifier);
		try {
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23; plusminus();
				State = 24; Match(CONSTANT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; plusminus();
				State = 27; variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusminusContext : ParserRuleContext {
		public PlusminusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusminus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterPlusminus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitPlusminus(this);
		}
	}

	[RuleVersion(0)]
	public PlusminusContext plusminus() {
		PlusminusContext _localctx = new PlusminusContext(Context, State);
		EnterRule(_localctx, 8, RULE_plusminus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLENAME() { return GetToken(ComponentPointParser.VARIABLENAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IComponentPointListener typedListener = listener as IComponentPointListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(T__5);
			State = 34; Match(VARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\'', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x18', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ' ', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x4', '\x3', '\x2', '\x3', '\x5', 
		'\x3', '\x2', '\x6', '\a', '\x2', '\"', '\x2', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x11', '\x3', '\x2', '\x2', '\x2', '\x6', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1F', '\x3', '\x2', '\x2', '\x2', '\n', '!', 
		'\x3', '\x2', '\x2', '\x2', '\f', '#', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x10', '\x5', '\x6', '\x4', 
		'\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\t', 
		'\x2', '\x2', '\x2', '\x12', '\x5', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x14', '\x5', '\b', '\x5', '\x2', '\x14', '\x15', '\x5', '\x6', '\x4', 
		'\x2', '\x15', '\x18', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x13', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\x5', '\n', '\x6', '\x2', '\x1A', '\x1B', '\a', 
		'\t', '\x2', '\x2', '\x1B', ' ', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\x5', '\n', '\x6', '\x2', '\x1D', '\x1E', '\x5', '\f', '\a', '\x2', '\x1E', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', ' ', '\t', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\t', '\x3', '\x2', '\x2', '\"', '\v', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\a', '\b', '\x2', '\x2', '$', '%', '\a', 
		'\n', '\x2', '\x2', '%', '\r', '\x3', '\x2', '\x2', '\x2', '\x4', '\x17', 
		'\x1F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
